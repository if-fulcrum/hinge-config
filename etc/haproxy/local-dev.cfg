# doing stuff without changing the config from the cli
# install socat with your package manager
# view the status page to see these commands take effect
# socat /run/haproxy/admin.sock - <<< "help"
# socat /run/haproxy/admin.sock - <<< "disable server backend-default/varnish01"
# socat /run/haproxy/admin.sock - <<< "enable server backend-default/varnish01"

global
    stats socket /run/haproxy-admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # send syslog messages to the host 'rsyslog'
    ### log rsyslog syslog

    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # https://cipherli.st
    # https://www.ssllabs.com/ssltest/
    # tls settings
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets

defaults
    default_backend backend-default
    log     global
    mode    http
    option  forwardfor
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

frontend frontend-default
    bind *:80
    bind *:443 ssl crt /etc/certs.d alpn h2,http/1.1

    # ideally we would force all traffic to https, but not all clients are ready for this, will have to be done at drupal for now
    # redirect scheme https code 301 if !{ ssl_fc }

    # ideally if all clients were https ready, we would set this cookie so all comms are only done with HSTS on
    # HSTS (15768000 seconds = 6 months)
    # http-response set-header Strict-Transport-Security max-age=15768000

    # long running queries that need timeouts adjusted
    acl path_cron path_beg /cron/
    acl path_export_config path /admin/config/development/configuration/full/export-download
    use_backend backend-longrunning if path_cron
    use_backend backend-longrunning if path_export_config

    # https://www.haproxy.com/blog/haproxys-load-balancing-algorithm-for-static-content-delivery-with-varnish/
    # remove .css and .js for now until we ensure purgers are working
    # acl static_content path_end -i .doc .docx .gif .ico .jpg .json .map .mp4 .pdf .png .ppt .pptx .svg .ttf .woff .woff2 .xls .xlsx
    # use_backend backend-static-varnish if static_content

frontend frontend-bypass-varnish
    bind *:4080
    bind *:4433 ssl crt /etc/certs.d

    # https://www.haproxy.com/blog/use-a-load-balancer-as-a-first-row-of-defense-against-ddos/
    # https://github.com/jvehent/haproxy-aws#automated-rate-limiting
    # http://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-stick-table
    # Define a table that will store IPs associated with counters
    stick-table type ip size 500k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)

    # Allow clean known IPs to bypass the filter
    # tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }

    # counter of the concurrent connection count for this IP.
    # tcp-request connection reject if { src_conn_cur ge 100 }

    # sliding window that counts new TCP connections over a X seconds period
    # tcp-request connection reject if { src_conn_cur_rate ge 50 }

    # sliding window that counts HTTP requests over a X seconds period
    # tcp-request connection reject if { src_http_req_rate ge 25 }

    # sliding window that counts HTTP errors triggered by requests from that IP over a X seconds period
    # tcp-request connection reject if { src_http_err_rate ge 10 }

    # Enable tracking of src IP in the stick-table
    tcp-request content track-sc0 src

    use_backend backend-bypass-varnish

frontend frontend-xdebug
    bind *:5080
    bind *:5433 ssl crt /etc/certs.d

    # need these to not have xdebug sessions timeout after 50 seconds
    timeout client  3600s

    # https://www.haproxy.com/blog/use-a-load-balancer-as-a-first-row-of-defense-against-ddos/
    # https://github.com/jvehent/haproxy-aws#automated-rate-limiting
    # http://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-stick-table
    # Define a table that will store IPs associated with counters
    stick-table type ip size 500k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)

    # Allow clean known IPs to bypass the filter
    # tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }

    # counter of the concurrent connection count for this IP.
    # tcp-request connection reject if { src_conn_cur ge 100 }

    # sliding window that counts new TCP connections over a X seconds period
    # tcp-request connection reject if { src_conn_cur_rate ge 50 }

    # sliding window that counts HTTP requests over a X seconds period
    # tcp-request connection reject if { src_http_req_rate ge 25 }

    # sliding window that counts HTTP errors triggered by requests from that IP over a X seconds period
    # tcp-request connection reject if { src_http_err_rate ge 10 }

    # Enable tracking of src IP in the stick-table
    tcp-request content track-sc0 src

    use_backend backend-xdebug


backend backend-bypass-varnish
    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server nginx nginx:80 check port 80

backend backend-xdebug
    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server nginxxdebug nginxxdebug:80 check port 80

    # need these to not have xdebug sessions timeout after 50 seconds
    timeout connect 3600s
    timeout server  3600s

backend backend-default
    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server varnish varnish:80 check port 80 send-proxy-v2

# backend backend-static-varnish
#     option http-server-close
#     http-request set-header X-Forwarded-Port %[dst_port]
#     http-request add-header X-Forwarded-Proto https if { ssl_fc }
#     server varnishstatic varnishstatic:80 check port 80 send-proxy-v2


backend backend-longrunning
    timeout server  500s
    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server varnish varnish:80 check port 80 send-proxy-v2

### listen stats
###     # must come here with https
###     bind *:1936 ssl crt /etc/certs.d
###     stats enable
###     stats uri /
###     stats hide-version
###     stats auth UsEr:PaSsWoRd_CHANGE_ME
